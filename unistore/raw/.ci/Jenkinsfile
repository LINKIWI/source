pipeline {
    agent {
        docker {
            image 'docker.internal.kevinlin.info/infra/ci-base:0.3.7'
            label 'docker-executor'
        }
    }

    options {
        withAWS(
            endpointUrl: 'https://storage.kevinlin.info',
            credentials: 'storage-internal',
        )
    }

    stages {
        stage('Install') {
            steps {
                sh 'make dependencies'
            }
        }
        stage('Schemas') {
            steps {
                sh 'make schemas -j'
            }
        }
        stage('Lint') {
            steps {
                sh 'make lint'
            }
        }
        stage('Build') {
            parallel {
                stage('linux/amd64') {
                    environment {
                        CGO_ENABLED = '0'
                        GOOS = 'linux'
                        GOARCH = 'amd64'
                        VERSION = "${GIT_COMMIT}"
                    }
                    steps {
                        sh 'make -j'
                    }
                }
                stage('linux/arm') {
                    environment {
                        CGO_ENABLED = '0'
                        GOOS = 'linux'
                        GOARCH = 'arm'
                        VERSION = "${GIT_COMMIT}"
                    }
                    steps {
                        sh 'make -j'
                    }
                }
            }
        }
        stage('Release') {
            environment {
                BINARY_FILES = findFiles(glob: 'bin/**/*').join(' ')
                SCHEMA_FILES = findFiles(glob: 'schemas/**/*.proto').join(' ')
            }
            steps {
                sh "tar -cvzf release.tar.gz ${BINARY_FILES} ${SCHEMA_FILES}"
                s3Upload(
                    bucket: 'internal',
                    path: "deploy/${env.JOB_NAME}/${env.GIT_COMMIT}/",
                    file: 'release.tar.gz',
                )
            }
        }
        stage('Publish') {
            parallel {
                stage('Schemas') {
                    steps {
                        build(
                            job: 'task--schema',
                            parameters: [
                                string(name: 'RELEASE_ARTIFACT', value: env.JOB_NAME),
                                string(name: 'RELEASE_VERSION', value: env.GIT_COMMIT),
                                string(name: 'SCHEMA_PATH', value: 'schemas'),
                                string(name: 'GO_MODULE', value: 'lib.kevinlin.info/schemas/unistore'),
                                string(name: 'NODE_PACKAGE', value: 'unistore'),
                                string(name: 'PYTHON_PACKAGE', value: 'unistore'),
                            ],
                            wait: true,
                        )
                    }
                }
                stage('Binary') {
                    environment {
                        PACKAGE_VERSION = sh(
                            script: 'git show ' +
                                    '--no-patch ' +
                                    '--no-notes ' +
                                    "--date=format:\"%Y.%m.%d-%H.%M.%S-\$(echo ${GIT_COMMIT} | cut -c -8)\" " +
                                    "--pretty=format:'%cd' ${GIT_COMMIT}",
                            returnStdout: true,
                        ).trim()
                    }
                    stages {
                        stage('linux/amd64') {
                            steps {
                                build(
                                    job: 'task--package',
                                    parameters: [
                                        string(name: 'RELEASE_ARTIFACT', value: env.JOB_NAME),
                                        string(name: 'RELEASE_VERSION', value: env.GIT_COMMIT),
                                        string(name: 'PACKAGE_NAME', value: env.JOB_NAME),
                                        string(name: 'PACKAGE_VERSION', value: env.PACKAGE_VERSION),
                                        string(name: 'PACKAGE_DESCRIPTION', value: 'Object storage server'),
                                        string(name: 'PACKAGE_ARCHITECTURE', value: 'amd64'),
                                        string(name: 'BINARY_SPEC', value: 'unistore:bin/unistore/unistore-linux-amd64,uni:bin/unistore-cli/unistore-cli-linux-amd64'),
                                    ],
                                    wait: true,
                                )
                            }
                        }
                        stage('linux/arm') {
                            steps {
                                build(
                                    job: 'task--package',
                                    parameters: [
                                        string(name: 'RELEASE_ARTIFACT', value: env.JOB_NAME),
                                        string(name: 'RELEASE_VERSION', value: env.GIT_COMMIT),
                                        string(name: 'PACKAGE_NAME', value: env.JOB_NAME),
                                        string(name: 'PACKAGE_VERSION', value: env.PACKAGE_VERSION),
                                        string(name: 'PACKAGE_DESCRIPTION', value: 'Object storage server'),
                                        string(name: 'PACKAGE_ARCHITECTURE', value: 'armhf'),
                                        string(name: 'BINARY_SPEC', value: 'unistore:bin/unistore/unistore-linux-arm,uni:bin/unistore-cli/unistore-cli-linux-arm'),
                                    ],
                                    wait: true,
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
